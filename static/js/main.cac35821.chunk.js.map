{"version":3,"sources":["App.tsx","HttpCommon.tsx","Models/Post.tsx","Services/PostsService.tsx","Views/Common/SearchInput.tsx","Views/PostView/PostDisplay.tsx","Views/PostView/PostListDisplay.tsx","Views/PostView/PostView.tsx","Models/User.tsx","Services/UserService.tsx","Views/UserView/UserDisplay.tsx","Views/UserView/UserView.tsx","serviceWorker.ts","index.tsx"],"names":["allView","axiosInstance","axios","create","baseURL","process","REACT_APP_API_BASE_URL","headers","Post","args","userId","id","title","body","this","postData","_relativeUrl","_cachedPostList","get","data","deserialize","response","postList","map","postId","patch","delete","retrievePostList","filter","post","SearchInput","props","useState","searchedValue","setSearchedValue","className","type","value","onChange","event","newSearch","target","onNewSearch","onClick","onReset","PostDisplay","deletePost","PostListDisplay","key","PostView","setPostList","displayedPostList","setDisplayedPostList","currentPage","setCurrentPage","isSearch","setIsSearch","useEffect","sub","from","PostsService","subscribe","next","_setPaginationAndList","error","unsubscribe","page","partialPostList","slice","lastPage","Math","ceil","length","isFirstPage","isLastPage","resetSearch","term","_term","toLowerCase","matchingPosts","includes","Fragment","newPage","User","name","username","email","street","suite","city","zipcode","lat","lng","phone","website","companyName","companyCatchPhrase","companyBs","userData","address","geo","company","catchPhrase","bs","UserDisplay","showDetails","setShowDetails","showPosts","setShowPosts","userPostList","setUserPostList","switchUserPosts","a","retrievePostFromUser","user","fullAddress","UserView","userList","setUserList","filteredUserList","setFilteredUserList","UserService","retrieveUserList","searchedName","_searchedName","App","Posts","displayedView","setDisplayedView","selectView","view","Users","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cac35821.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport PostView from './Views/PostView/PostView';\nimport UserView from './Views/UserView/UserView';\n\nenum allView {\n    Users = 'users',\n    Posts = 'posts',\n}\n\nconst App = () => {\n\n    const [displayedView, setDisplayedView] = useState(allView.Posts);\n\n    const selectView = (view: allView) => {\n        setDisplayedView(view);\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <div>\n                    <span className={`m ${displayedView === allView.Posts ? 'bold' : ''} `}\n                          onClick={() => selectView(allView.Posts)}>Posts</span>\n\n                    <span className={`m ${displayedView === allView.Users ? 'bold' : ''} `}\n                          onClick={() => selectView(allView.Users)}>Users</span>\n                </div>\n            </header>\n\n            {displayedView === allView.Posts && <PostView/>}\n\n            {displayedView === allView.Users && <UserView/>}\n\n        </div>\n    );\n};\n\nexport default App;\n","import axios from 'axios';\n\nlet axiosInstance = axios.create({\n    baseURL: process.env.REACT_APP_API_BASE_URL || 'https://jsonplaceholder.typicode.com/',\n    headers: {\n        'Content-type': 'application/json',\n    },\n});\n\nexport default axiosInstance;\n","export class Post {\n    userId: string = '';\n    id: string = '';\n    title: string = '';\n    body: string = '';\n\n    constructor(args?: Partial<Post>) {\n        if (args == null) {\n            return;\n        }\n\n        this.userId = args.userId || '';\n        this.id = args.id || '';\n        this.title = args.title || '';\n        this.body = args.body || '';\n    }\n\n    static deserialize(postData: any) {\n        return new Post(postData);\n    }\n}","import axios from '../HttpCommon';\nimport {Post} from '../Models/Post';\n\nclass PostService {\n\n    private _relativeUrl = 'posts';\n    private _cachedPostList: any;\n\n    async retrievePost(): Promise<Post> {\n        return Post.deserialize((await axios.get(`${this._relativeUrl}`)).data);\n    }\n\n    async retrievePostList(): Promise<Post[]> {\n        if (this._cachedPostList != null) {\n            return this._cachedPostList;\n        }\n\n        const response = await axios.get(`${this._relativeUrl}`);\n\n        const postList = response.data.map(Post.deserialize);\n        this._cachedPostList = postList;\n\n        return postList;\n    }\n\n    async updatePost(postId: number, postData: Partial<Post>): Promise<Post> {\n        return Post.deserialize((await axios.patch(`${this._relativeUrl}/${postId}`, postData)).data);\n    }\n\n    async deletePost(postId: number): Promise<any> {\n        return axios.delete(`${this._relativeUrl}/${postId}`);\n    }\n\n    async retrievePostFromUser(userId: string): Promise<Post[]> {\n        const postList = await this.retrievePostList();\n        return postList.filter(post => post.userId === userId);\n    }\n}\n\nexport default new PostService();","import React, {useState} from 'react';\n\ntype LocalProps = {\n    onNewSearch?: (searchedValue: string) => void\n    onReset: () => void\n    title: string\n}\n\nconst SearchInput: React.FunctionComponent<LocalProps> = (props) => {\n\n    const [searchedValue, setSearchedValue] = useState('');\n\n    const updateSearch = (newSearch: string) => {\n        setSearchedValue(newSearch);\n        props.onNewSearch && props.onNewSearch(newSearch);\n    };\n\n    const resetSearch = () => {\n        setSearchedValue('');\n        props.onReset();\n    };\n\n    return (\n        <div className={'m'}>\n\n            <span className={'m'}>{props.title || 'Search'}</span>\n\n            <input type='text'\n                   className={'m'}\n                   value={searchedValue}\n                   onChange={(event) => updateSearch(event.target.value)}/>\n\n            {searchedValue && <button className={'m'} onClick={resetSearch}>Reset</button>}\n        </div>\n    );\n};\n\nexport default SearchInput;","import React from 'react';\nimport {Post} from '../../Models/Post';\n\ntype LocalProps = {\n    post: Post\n    deletePost?: (id: string) => void\n}\n\nconst PostDisplay: React.FunctionComponent<LocalProps> = (props) => {\n\n    return (\n        <tr>\n            <td>\n                {props.post.title}\n            </td>\n            <td>\n                {props.deletePost && <button onClick={() => props.deletePost && props.deletePost(props.post.id)}>Delete</button>}\n            </td>\n        </tr>\n    );\n};\n\nexport default PostDisplay;","import React from 'react';\nimport {Post} from '../../Models/Post';\nimport PostDisplay from './PostDisplay';\n\ntype LocalProps = {\n    postList: Post[]\n    deletePost?: (id: string) => void\n}\n\nconst PostListDisplay: React.FunctionComponent<LocalProps> = (props) => {\n\n    return (\n        <div className={'cent'}>\n            <table className={'m'}>\n                <thead>\n                <tr>\n                    <th>\n                        Title\n                    </th>\n                </tr>\n                </thead>\n                <tbody>\n\n                {\n                    props.postList.map(post => {\n                        return <PostDisplay key={post.id} post={post} deletePost={props.deletePost}/>;\n                    })\n                }\n\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default PostListDisplay;","import React, {useEffect, useState} from 'react';\nimport {from} from 'rxjs';\nimport {Post} from '../../Models/Post';\nimport PostsService from '../../Services/PostsService';\nimport SearchInput from '../Common/SearchInput';\nimport PostListDisplay from './PostListDisplay';\n\nconst PostView: React.FunctionComponent<any> = (props) => {\n\n    const nbResults = 25;\n\n    const [postList, setPostList] = useState<Post[]>([]);\n    const [displayedPostList, setDisplayedPostList] = useState<Post[]>([]);\n    const [currentPage, setCurrentPage] = useState<number>(0);\n    const [isSearch, setIsSearch] = useState(false);\n\n    useEffect(() => {\n\n        const sub = from(PostsService.retrievePostList())\n            .subscribe({\n                next: postList => {\n                    setPostList(postList);\n                    _setPaginationAndList(postList, 0);\n                },\n                error: error => {\n                    // TODO\n                },\n            });\n\n        return () => {\n            sub.unsubscribe();\n        };\n\n    }, []);\n\n    const _setPaginationAndList = (postList: Post[], page: number): void => {\n        setCurrentPage(page);\n        const partialPostList = postList.slice(page * nbResults, (page + 1) * nbResults);\n        setDisplayedPostList(partialPostList);\n    };\n\n    const lastPage = () => {\n        return Math.ceil(postList.length / nbResults) - 1;\n    };\n\n    const isFirstPage = () => {\n        return currentPage === 0;\n    };\n\n    const isLastPage = () => {\n        return currentPage === lastPage();\n    };\n\n    const goToPreviousPage = () => {\n        const newPage = currentPage - 1;\n        _setPaginationAndList(postList, newPage);\n    };\n\n    const goToNextPage = () => {\n        const newPage = currentPage + 1;\n        _setPaginationAndList(postList, newPage);\n    };\n\n    const goToFirstPage = () => {\n        const newPage = 0;\n        _setPaginationAndList(postList, newPage);\n    };\n\n    const goToLastPage = () => {\n        const newPage = lastPage();\n        _setPaginationAndList(postList, newPage);\n    };\n\n    const deletePost = (postId: string) => {\n        setPostList(postList.filter(post => post.id !== postId));\n        setDisplayedPostList(displayedPostList.filter(post => post.id !== postId));\n    };\n\n    const resetSearch = () => {\n        setIsSearch(false);\n        setDisplayedPostList(postList);\n    };\n\n    const searchTerm = (term: string) => {\n        const _term = term?.toLowerCase();\n        if (!_term) {\n            resetSearch();\n            return;\n        }\n\n        setIsSearch(true);\n\n        const matchingPosts = postList.filter(post =>\n            post.title?.toLowerCase()?.includes(_term)\n            || post.body?.toLowerCase()?.includes(_term));\n        setDisplayedPostList(matchingPosts);\n\n        _setPaginationAndList(matchingPosts, 0);\n    };\n\n    return (\n        <div>\n\n            <SearchInput title={'Magic search'} onNewSearch={searchTerm} onReset={resetSearch}/>\n\n            {!isSearch && <React.Fragment>\n                <div className={'m'}>Page {currentPage + 1}</div>\n                <div className={'m'}>\n                    {!isFirstPage() && <button className={'mx mw-100'} onClick={goToFirstPage}>First page</button>}\n                    {!isFirstPage() && <button className={'mx mw-100'} onClick={goToPreviousPage}>Previous page</button>}\n                    {!isLastPage() && <button className={'mx mw-100'} onClick={goToNextPage}>Next page</button>}\n                    {!isLastPage() && <button className={'mx mw-100'} onClick={goToLastPage}>Last page</button>}\n                </div>\n            </React.Fragment>}\n\n            <PostListDisplay postList={displayedPostList} deletePost={deletePost}/>\n\n        </div>\n    );\n};\n\nexport default PostView;","import {UserDataInterface} from './UserDataInterface';\n\nexport class User {\n\n    id: string = '';\n    name: string = '';\n    username: string = '';\n    email: string = '';\n    street: string = '';\n    suite: string = '';\n    city: string = '';\n    zipcode: string = '';\n    lat: string = '';\n    lng: string = '';\n    phone: string = '';\n    website: string = '';\n    companyName: string = '';\n    companyCatchPhrase: string = '';\n    companyBs: string = '';\n\n    constructor(args: Partial<User>) {\n        if (args == null) {\n            return;\n        }\n\n        this.id = args.id || '';\n        this.name = args.name || '';\n        this.username = args.username || '';\n        this.email = args.email || '';\n        this.street = args.street || '';\n        this.suite = args.suite || '';\n        this.city = args.city || '';\n        this.zipcode = args.zipcode || '';\n        this.lat = args.lat || '';\n        this.lng = args.lng || '';\n        this.phone = args.phone || '';\n        this.website = args.website || '';\n        this.companyName = args.companyName || '';\n        this.companyCatchPhrase = args.companyCatchPhrase || '';\n        this.companyBs = args.companyBs || '';\n    }\n\n    static deserialize(userData: UserDataInterface): User {\n        return new User({\n            id: userData.id,\n            name: userData.name,\n            username: userData.username,\n            email: userData.email,\n            street: userData.address.street,\n            suite: userData.address.suite,\n            city: userData.address.city,\n            zipcode: userData.address.zipcode,\n            lat: userData.address.geo.lat,\n            lng: userData.address.geo.lng,\n            phone: userData.phone,\n            website: userData.website,\n            companyName: userData.company.name,\n            companyCatchPhrase: userData.company.catchPhrase,\n            companyBs: userData.company.bs,\n        });\n    }\n\n    fullAddress(): string {\n        return `${this.street} ${this.suite} ${this.zipcode} ${this.city}`;\n    }\n\n}","import axios from '../HttpCommon';\nimport {User} from '../Models/User';\nimport {UserDataInterface} from '../Models/UserDataInterface';\n\nclass UserService {\n\n    private _relativeUrl = 'users';\n\n    async retrieveUser(userId: string): Promise<User> {\n        return User.deserialize((await axios.get(`${this._relativeUrl}/${userId}`)).data);\n    }\n\n    async retrieveUserList(): Promise<User[]> {\n        const response = await axios.get(`${this._relativeUrl}`);\n\n        return response.data\n            .map((userData: UserDataInterface) => User.deserialize(userData));\n    }\n\n}\n\nexport default new UserService();","import React, {useState} from 'react';\nimport {Post} from '../../Models/Post';\nimport {User} from '../../Models/User';\nimport PostsService from '../../Services/PostsService';\nimport PostListDisplay from '../PostView/PostListDisplay';\n\ntype LocalProps = {\n    user: User;\n}\n\nconst UserDisplay: React.FunctionComponent<LocalProps> = (props) => {\n\n    const [showDetails, setShowDetails] = useState<boolean>(false);\n    const [showPosts, setShowPosts] = useState<boolean>(false);\n    const [userPostList, setUserPostList] = useState<null | Post[]>(null);\n\n    const switchUserDetails = () => {\n        setShowDetails(!showDetails);\n    };\n\n    const switchUserPosts = async () => {\n        setShowPosts(!showPosts);\n        if (userPostList != null) {\n            return;\n        }\n        const post = await PostsService.retrievePostFromUser(props.user.id);\n        setUserPostList(post);\n    };\n\n    return (\n        <div className={'m'}>\n            <div>\n                <span>{props.user?.name}</span>\n                <div>\n                    <span className={'mw-300'}>\n                        <button className={'mx'} onClick={switchUserDetails}>{showDetails ? 'Hide' : 'Show'} Details</button>\n                    </span>\n                    <span className={'mw-300'}>\n                        <button className={'mx'} onClick={switchUserPosts}>{showPosts ? 'Hide' : 'Show'} Posts</button>\n                    </span>\n                </div>\n            </div>\n\n            {\n                showDetails && <div className={'m'}>\n                    <div><span>Username</span><span>{props.user?.username}</span></div>\n                    <div><span>Mail</span><span>{props.user?.email}</span></div>\n                    <div><span>Address</span><span>{props.user?.fullAddress()}</span></div>\n                </div>\n            }\n\n            {\n                showPosts && <div className={'m'}>\n                    <PostListDisplay postList={userPostList || []}/>\n                </div>\n            }\n\n        </div>\n    );\n};\n\nexport default UserDisplay;","import React, {useEffect, useState} from 'react';\nimport {from} from 'rxjs';\nimport {User} from '../../Models/User';\nimport UserService from '../../Services/UserService';\nimport SearchInput from '../Common/SearchInput';\nimport UserDisplay from './UserDisplay';\n\nconst UserView: React.FunctionComponent<any> = (props) => {\n\n    const [userList, setUserList] = useState<User[]>([]);\n    const [filteredUserList, setFilteredUserList] = useState<User[]>([]);\n\n    useEffect(() => {\n\n        const sub = from(UserService.retrieveUserList())\n            .subscribe({\n                next: userList => {\n                    setUserList(userList);\n                    setFilteredUserList(userList);\n                },\n                error: error => {\n                    // TODO\n                },\n            });\n\n        return () => {\n            sub.unsubscribe();\n        };\n\n    }, []);\n\n    const searchName = (searchedName: string) => {\n        const _searchedName = searchedName?.toLowerCase();\n\n        if (_searchedName == null) {\n            return;\n        }\n\n        setFilteredUserList(userList.filter(user => user.name?.toLowerCase()?.includes(_searchedName)));\n    };\n\n    const resetInput = () => {\n        setFilteredUserList(userList);\n    };\n\n    return (\n        <div>\n\n            <SearchInput title={'Search user by first name or last name'} onNewSearch={searchName} onReset={resetInput}/>\n\n            {\n                filteredUserList.map(user => {\n                    return <UserDisplay key={user.id} user={user}/>;\n                })\n            }\n\n        </div>\n    );\n};\n\nexport default UserView;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}